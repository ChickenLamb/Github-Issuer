import Head from 'next/head'
import CssBaseline from '@mui/material/CssBaseline';
import { Box, Container } from '@mui/system';
import ButtonAppBar from '@/conponents/ButtonAppBar';
import {useEffect, useRef, useState} from 'react'
import BasicStack from '@/conponents/BasicStack';
const axios = require('axios');
const CLIENTID = "9413d76463c0af53a8a0";

 

export default function Home() {
  const shouldRender = useRef([true,true,true]);
  const [issues, setIssues] = useState<any>();
  const[access_token,setAccess_Token]=useState<string>("");
  useEffect(()=>{
    if(shouldRender.current[0]) {
      shouldRender.current[0] = false;
      // 需要檢查token的有效期和儲存token到local
      const queryString = window.location.search;
      const urlParams = new URLSearchParams(queryString);
      if((urlParams.get("code"))){
        let CODE = urlParams.get("code");
        // 移除param 'code' not done
        console.log("code:"+CODE);
        let config = {
          method: 'post',
          maxBodyLength: Infinity,
          url: 'https://github-get-token-api.vercel.app/api/get?code='+`${CODE}`,
          
        };
        
        axios.request(config)
        .then((response:any) => {
          console.log(JSON.stringify(response.data));
          setAccess_Token(response.data.access_token);
        })
        .catch((error:any) => {
          console.log(error);
        });

      };
    } 
  },[])
  useEffect(()=>{
    if(shouldRender.current[1] && access_token !== "") {
      shouldRender.current[1] = false;
// 就算有access token 它也只會呼叫一次
      let config = {
        method: 'get',
        maxBodyLength: Infinity,
        url: 'https://api.github.com/issues',
        headers: { 
          'Accept': 'application/vnd.github+json', 
          'Authorization': 'Bearer '+`${access_token}`, 
          
        }
      };
      
      axios.request(config)
      .then((response:any) => {
        // console.log(JSON.stringify(response.data));
        setIssues(response.data);
      })
      .catch((error:any) => {
        console.log(error);
      });
      

    }
  },[access_token]);
  useEffect(()=>{if(shouldRender.current[2] && issues !== undefined) {
    shouldRender.current[2] = false;console.log("this is issue", issues)}},[issues]);
  return (
    <>
    <CssBaseline />
      <Head>
        <title>2023 Frontend Intern Homework</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Container maxWidth="xl" disableGutters={true}>
        {/* <Box sx={{ bgcolor: '#cfe8fc', height: '100lvh' }} >
        </Box> */}
        <ButtonAppBar clientid={CLIENTID}/>
      </Container>
      {issues!== undefined && <BasicStack Data={issues}/>}
      
    </>
  )
}
