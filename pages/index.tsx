import Head from 'next/head'
import CssBaseline from '@mui/material/CssBaseline';
import { Box, Container } from '@mui/system';
import ButtonAppBar from '@/conponents/ButtonAppBar';
import {useEffect, useRef, useState} from 'react'
import BasicStack from '@/conponents/BasicStack';
import UpdateModal from '@/conponents/Update_Modal';
import { ToastContainer, toast } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';
import TopBar from '@/conponents/TopBar';

const CLIENTID = "9413d76463c0af53a8a0";

 interface FormData{
  title?:string,
  body?:string,
  open:boolean,
  issue_url?:string
 }

export default function Home() {
  
  const shouldRender = useRef([true,true,true,true,true]);
  const [issues, setIssues] = useState<any>();
  const[access_token,setAccess_Token]=useState<string>("");
  const[update_form,setUpdate_Form]=useState<FormData>({open:false});
  const[sortOrder,setSortOrder]=useState<string>("created");
  const handleClose = () => {setUpdate_Form({...update_form,open:false});shouldRender.current[3]=true;};
  const callback = (payload:FormData) => {
    setUpdate_Form(payload);
    shouldRender.current[3]=true;
}
const axios = require('axios');

const setSortOrder_callback = (payload:string) => {
  setSortOrder(payload);
  shouldRender.current[4] = true;
}
const LoadIssue = async (reload:boolean) => {
  if(reload === true){
    const id = toast.loading("Fetching Issues...");
    shouldRender.current[2]= true;
    console.log("trigger reload");
    let config = {
      method: 'get',
      maxBodyLength: Infinity,
      url: 'https://github-get-token-api.vercel.app/api/get-issues-sort?token='+`${access_token}`+'&sort='+`${sortOrder}`,
      
    };

    await axios.request(config)
    .then((response:any) => {
      console.log((response));
      setIssues(response.data);
      toast.update(id, {render: "Issues Loaded successfully", type: "success", isLoading: false, autoClose:2500});
    })
    .catch((error:any) => {
      console.log(error);
      toast.update(id, {render: "Something went wrong", type: "error", isLoading: false, autoClose:2500});
    });
  }
}

function validate_and_setToken(github_access_key:string){
  let config = {
    method: 'get',
    maxBodyLength: Infinity,
    url: 'https://github-get-token-api.vercel.app/api/validate?key='+`${github_access_key}`,
    
  };
  
  axios.request(config)
.then((response:any) => {
  if(response.status === 200){
    setAccess_Token(github_access_key);
    console.log("using local_key");
  }
})
.catch((error:any) => {
  localStorage.clear();
});
}

useEffect(()=>{if(shouldRender.current[3]) {shouldRender.current[3] = false;;console.log(update_form)}},[update_form]);
  useEffect(()=>{
    if(shouldRender.current[0]) {
      shouldRender.current[0] = false;
      // 需要檢查token的有效期和儲存token到local
      const github_access_key = (localStorage.getItem('github_access_key')??"");
      validate_and_setToken(github_access_key);
      
      const queryString = window.location.search;
      const urlParams = new URLSearchParams(queryString);
      if((urlParams.get("code"))){
        let CODE = urlParams.get("code");
        // 移除param 'code' not done
       
        console.log("code:"+CODE);
        let config = {
          method: 'post',
          maxBodyLength: Infinity,
          url: 'https://github-get-token-api.vercel.app/api/get?code='+`${CODE}`,
          
        };
        axios.request(config)
        .then((response:any) => {
          console.log(JSON.stringify(response.data));
          setAccess_Token(response.data.access_token);
          localStorage.setItem('github_access_key', (response.data.access_token));
        })
        .catch((error:any) => {
          console.log(error);
        });

      };
    } 

        },[]);

        useEffect(() => {if(shouldRender.current[4] && access_token !== "") {
          shouldRender.current[4] = false;LoadIssue(true)}}, [sortOrder]);
        useEffect(()=>{
          if(shouldRender.current[1] && access_token !== "") {
            shouldRender.current[1] = false;
      // 就算有access token 它也只會呼叫一次
           
            LoadIssue(true);
          }
        },[access_token]);
        useEffect(()=>{if(shouldRender.current[2] && issues !== undefined) {
          shouldRender.current[2] = false;console.log("this is issue", issues)}},[issues]);

  return (
    <>
    <CssBaseline />
      <Head>
        <title>2023 Frontend Intern Homework</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Container maxWidth="xl" disableGutters={true}>
        {/* <Box sx={{ bgcolor: '#cfe8fc', height: '100lvh' }} >
        </Box> */}
        <ButtonAppBar clientid={CLIENTID}/>
        <TopBar token={access_token} LoadIssue={LoadIssue} setSortOrder={setSortOrder_callback} sortOrder={sortOrder}/>
        {issues!== undefined && <BasicStack Data={issues} token={access_token} callback={callback} LoadIssue={LoadIssue}/>}
        <UpdateModal updateForm={update_form} handleClose={handleClose} token={access_token} LoadIssue={LoadIssue}/>
        <ToastContainer
        position="top-right"
        autoClose={2500}
        hideProgressBar={false}
        newestOnTop={false}
        closeOnClick
        rtl={false}
        pauseOnFocusLoss
        draggable
        pauseOnHover
        theme="light" />
      </Container>
      
      
    </>
  )
}
